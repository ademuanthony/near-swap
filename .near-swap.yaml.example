# NEAR-Swap Configuration File
# Copy this file to ~/.near-swap.yaml or .near-swap.yaml in your project directory
# Then edit with your actual values

# ============================================================
# API Configuration
# ============================================================

# Your JWT token from NEAR Intents 1Click API
# Get it from: https://docs.near-intents.org/near-intents/integration/distribution-channels/1click-api
# Without a token, you'll incur a 0.1% fee on all swaps
jwt_token: "your-jwt-token-here"

# Base URL for the 1Click API (usually you don't need to change this)
base_url: "https://1click.chaindefuser.com"

# ============================================================
# Default Addresses (Optional)
# ============================================================
# Set default recipient and refund addresses to avoid typing them each time
# You can override these with command-line flags

# Default recipient address (where you receive swapped tokens)
# Example: "your-address.near" or "0x1234..." depending on your preferred chain
# default_recipient: "your-address.near"

# Default refund address (where refunds go if swap fails)
# Example: "0x1234..." for Ethereum, "your-address.near" for NEAR
# default_refund_to: "your-address.near"

# ============================================================
# Auto-Deposit Configuration
# ============================================================
# Configure automatic deposit sending for different blockchains
# When enabled, the CLI will automatically send your tokens to the deposit address

auto_deposit:
  # Enable auto-deposit feature (default: false)
  enabled: false

  # Bitcoin configuration
  bitcoin:
    # Enable auto-deposit for Bitcoin (default: false)
    enabled: false

    # Path to bitcoin-cli (default: uses PATH)
    cli_path: "bitcoin-cli"

    # Additional bitcoin-cli arguments (optional)
    # Example: ["-testnet", "-rpcuser=user", "-rpcpassword=pass"]
    cli_args: []

    # Wallet name (if using named wallets)
    # wallet: "default"

    # Transaction fee rate in sat/vB (optional, uses default if not set)
    # fee_rate: 1

  # Monero configuration
  monero:
    # Enable auto-deposit for Monero (default: false)
    enabled: false

    # monero-wallet-rpc host (default: 127.0.0.1)
    host: "127.0.0.1"

    # monero-wallet-rpc port (default: 18082)
    port: 18082

    # RPC username (if authentication is enabled)
    # username: "user"

    # RPC password (if authentication is enabled)
    # password: "pass"

    # Account index to use (default: 0)
    account_index: 0

    # Transaction priority (0=default, 1=unimportant, 2=normal, 3=elevated, 4=priority)
    priority: 0

    # Unlock time in blocks (0=default, transaction spendable after 10 blocks)
    # unlock_time: 0

  # Zcash configuration
  zcash:
    # Enable auto-deposit for Zcash (default: false)
    enabled: false

    # Path to zcash-cli (default: uses PATH)
    cli_path: "zcash-cli"

    # Additional zcash-cli arguments (optional)
    # Example: ["-testnet", "-rpcuser=user", "-rpcpassword=pass"]
    cli_args: []

  # EVM Networks configuration
  # Supports Ethereum, BSC, Polygon, Avalanche, Arbitrum, Optimism, Base, Fantom, etc.
  # You can configure multiple networks and the CLI will use the appropriate one based on the chain
  evm:
    # Enable auto-deposit for EVM networks (default: false)
    enabled: false

    # Configure individual networks
    networks:
      # Ethereum Mainnet
      # ethereum:
      #   rpc_url: "https://eth-mainnet.g.alchemy.com/v2/YOUR-API-KEY"
      #   chain_id: 1
      #   private_key_env: "ETH_PRIVATE_KEY"  # Name of environment variable containing your private key
      #   # gas_price: 20000000000  # Optional: wei per gas (if not set, uses network estimate)
      #   # gas_limit: 100000       # Optional: max gas (if not set, uses estimate)

      # Binance Smart Chain
      # bsc:
      #   rpc_url: "https://bsc-dataseed.binance.org"
      #   chain_id: 56
      #   private_key_env: "BSC_PRIVATE_KEY"

      # Polygon (Matic)
      # polygon:
      #   rpc_url: "https://polygon-rpc.com"
      #   chain_id: 137
      #   private_key_env: "POLYGON_PRIVATE_KEY"

      # Avalanche C-Chain
      # avalanche:
      #   rpc_url: "https://api.avax.network/ext/bc/C/rpc"
      #   chain_id: 43114
      #   private_key_env: "AVAX_PRIVATE_KEY"

      # Arbitrum One
      # arbitrum:
      #   rpc_url: "https://arb1.arbitrum.io/rpc"
      #   chain_id: 42161
      #   private_key_env: "ARBITRUM_PRIVATE_KEY"

      # Optimism
      # optimism:
      #   rpc_url: "https://mainnet.optimism.io"
      #   chain_id: 10
      #   private_key_env: "OPTIMISM_PRIVATE_KEY"

      # Base
      # base:
      #   rpc_url: "https://mainnet.base.org"
      #   chain_id: 8453
      #   private_key_env: "BASE_PRIVATE_KEY"

      # Fantom Opera
      # fantom:
      #   rpc_url: "https://rpc.ftm.tools"
      #   chain_id: 250
      #   private_key_env: "FANTOM_PRIVATE_KEY"

  # Solana configuration
  # Supports native SOL and all SPL tokens (USDC, USDT, etc.)
  solana:
    # Enable auto-deposit for Solana (default: false)
    enabled: false

    # Solana RPC endpoint
    # Free public endpoint (may be slow):
    rpc_url: "https://api.mainnet-beta.solana.com"
    # For better performance, use a dedicated RPC provider:
    # rpc_url: "https://solana-mainnet.g.alchemy.com/v2/YOUR-API-KEY"
    # rpc_url: "https://rpc.helius.xyz/?api-key=YOUR-API-KEY"
    # rpc_url: "https://quiknode.pro/YOUR-ENDPOINT"

    # Optional: WebSocket URL for real-time updates
    # ws_url: "wss://api.mainnet-beta.solana.com"

    # Environment variable containing your wallet's private key (Base58 encoded)
    # Export from Phantom: Settings > Export Private Key
    # Or from Solflare, or use solana-keygen CLI
    # Then set: export SOLANA_PRIVATE_KEY="YOUR_BASE58_ENCODED_PRIVATE_KEY"
    # private_key_env: "SOLANA_PRIVATE_KEY"

    # Commitment level (default: confirmed)
    # Options: finalized (~32s, most secure), confirmed (~400ms, recommended), processed (~200ms, fastest)
    commitment: "confirmed"

    # Skip preflight transaction checks (default: false)
    # Only enable if you're experiencing issues with transaction simulation
    # skip_preflight: false

# ============================================================
# Display Preferences
# ============================================================

# Default output format: "text" or "json"
output_format: "text"

# Enable verbose output by default
verbose: false

# Skip confirmation prompts by default
auto_confirm: false

# ============================================================
# Network Settings
# ============================================================

# Request timeout in seconds
timeout: 30

# Number of retries for failed API requests
max_retries: 3

# ============================================================
# Trading Plans Configuration
# ============================================================

# Path to store trading plans (default: ~/.near-swap-plans.json)
# Leave empty to use the default location
# plan_storage_path: "/custom/path/to/plans.json"

# ============================================================
# IMPORTANT SECURITY NOTES
# ============================================================
#
# 1. NEVER commit this file with actual configuration to version control
#    - Add .near-swap.yaml to your .gitignore
#    - Only commit .near-swap.yaml.example
#
# 2. Always use environment variables for sensitive data:
#    - NEAR_SWAP_JWT_TOKEN for the JWT token
#    - Set private keys via environment variables (e.g., ETH_PRIVATE_KEY, SOLANA_PRIVATE_KEY)
#    - Reference them in config using private_key_env field
#
#    Example for bash/zsh:
#      export ETH_PRIVATE_KEY="0xYOUR_PRIVATE_KEY_HERE"
#      export SOLANA_PRIVATE_KEY="YOUR_BASE58_ENCODED_PRIVATE_KEY"
#
#    Example for fish shell:
#      set -x ETH_PRIVATE_KEY "0xYOUR_PRIVATE_KEY_HERE"
#      set -x SOLANA_PRIVATE_KEY "YOUR_BASE58_ENCODED_PRIVATE_KEY"
#
#    For persistence, add exports to your shell profile (~/.bashrc, ~/.zshrc, etc.)
#
# 3. Keep your private keys secure:
#    - Use a dedicated wallet for auto-deposit with limited funds
#    - Never share your private keys
#    - Consider using hardware wallets or key management services for large amounts
#
# 4. For EVM networks, you can use RPC providers:
#    - Alchemy (https://www.alchemy.com/) - Recommended
#    - Infura (https://infura.io/)
#    - QuickNode (https://www.quicknode.com/)
#    - Or run your own node
#
# 5. Always test with small amounts on testnets first:
#    - Use testnet networks before mainnet
#    - Verify addresses and amounts carefully
#
# 6. EVM Auto-Deposit supports:
#    - Native tokens (ETH, BNB, MATIC, etc.)
#    - ERC20 tokens (USDC, USDT, DAI, etc.)
#    - Automatic gas estimation
#    - Multiple networks simultaneously
#
# 7. Solana Auto-Deposit supports:
#    - Native SOL transfers
#    - SPL token transfers (USDC, USDT, etc.)
#    - Automatic associated token account creation
#    - Configurable commitment levels
#
# 8. How to get a Solana private key:
#    - From Phantom: Settings > Export Private Key (Base58 format)
#    - From Solflare: Settings > Export Private Key
#    - From CLI: Use the keypair at ~/.config/solana/id.json
#      To convert to Base58: cat ~/.config/solana/id.json | jq -r '.[0:32] | @base64d | @base58'
#    - NEVER use your main wallet - create a dedicated wallet for auto-deposit
